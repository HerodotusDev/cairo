InstructionRepr {
    off0: 0,
    off1: -1,
    off2: 1,
    imm: Some(
        7,
    ),
    dst_register: AP,
    op0_register: FP,
    op1_addr: Imm,
    res: Unconstrained,
    pc_update: Jnz,
    ap_update: Add1,
    fp_update: Regular,
    opcode: Nop,
}
InstructionRepr {
    off0: 0,
    off1: -6,
    off2: 1,
    imm: Some(
        340282366920938463463374607431768211456,
    ),
    dst_register: AP,
    op0_register: FP,
    op1_addr: Imm,
    res: Add,
    pc_update: Regular,
    ap_update: Add1,
    fp_update: Regular,
    opcode: AssertEq,
}
InstructionRepr {
    off0: -1,
    off1: -7,
    off2: 0,
    imm: None,
    dst_register: AP,
    op0_register: FP,
    op1_addr: Op0,
    res: Op1,
    pc_update: Regular,
    ap_update: Regular,
    fp_update: Regular,
    opcode: AssertEq,
}
InstructionRepr {
    off0: -1,
    off1: -1,
    off2: 1,
    imm: Some(
        106,
    ),
    dst_register: FP,
    op0_register: FP,
    op1_addr: Imm,
    res: Op1,
    pc_update: JumpRel,
    ap_update: Regular,
    fp_update: Regular,
    opcode: Nop,
}
InstructionRepr {
    off0: -6,
    off1: 0,
    off2: 1,
    imm: Some(
        0,
    ),
    dst_register: FP,
    op0_register: AP,
    op1_addr: Imm,
    res: Add,
    pc_update: Regular,
    ap_update: Add1,
    fp_update: Regular,
    opcode: AssertEq,
}
InstructionRepr {
    off0: -1,
    off1: -7,
    off2: 0,
    imm: None,
    dst_register: AP,
    op0_register: FP,
    op1_addr: Op0,
    res: Op1,
    pc_update: Regular,
    ap_update: Regular,
    fp_update: Regular,
    opcode: AssertEq,
}
InstructionRepr {
    off0: 0,
    off1: -7,
    off2: 1,
    imm: Some(
        1,
    ),
    dst_register: AP,
    op0_register: FP,
    op1_addr: Imm,
    res: Add,
    pc_update: Regular,
    ap_update: Add1,
    fp_update: Regular,
    opcode: AssertEq,
}
InstructionRepr {
    off0: -3,
    off1: 0,
    off2: -4,
    imm: None,
    dst_register: FP,
    op0_register: AP,
    op1_addr: FP,
    res: Add,
    pc_update: Regular,
    ap_update: Add1,
    fp_update: Regular,
    opcode: AssertEq,
}
InstructionRepr {
    off0: -1,
    off1: -1,
    off2: 1,
    imm: Some(
        4,
    ),
    dst_register: AP,
    op0_register: FP,
    op1_addr: Imm,
    res: Unconstrained,
    pc_update: Jnz,
    ap_update: Regular,
    fp_update: Regular,
    opcode: Nop,
}
InstructionRepr {
    off0: -1,
    off1: -1,
    off2: 1,
    imm: Some(
        10,
    ),
    dst_register: FP,
    op0_register: FP,
    op1_addr: Imm,
    res: Op1,
    pc_update: JumpRel,
    ap_update: Regular,
    fp_update: Regular,
    opcode: Nop,
}
InstructionRepr {
    off0: 0,
    off1: -4,
    off2: 1,
    imm: Some(
        1,
    ),
    dst_register: AP,
    op0_register: FP,
    op1_addr: Imm,
    res: Add,
    pc_update: Regular,
    ap_update: Add1,
    fp_update: Regular,
    opcode: AssertEq,
}
InstructionRepr {
    off0: 0,
    off1: -1,
    off2: -3,
    imm: None,
    dst_register: AP,
    op0_register: FP,
    op1_addr: FP,
    res: Op1,
    pc_update: Regular,
    ap_update: Add1,
    fp_update: Regular,
    opcode: AssertEq,
}
InstructionRepr {
    off0: 0,
    off1: -1,
    off2: 1,
    imm: Some(
        0,
    ),
    dst_register: AP,
    op0_register: FP,
    op1_addr: Imm,
    res: Op1,
    pc_update: Regular,
    ap_update: Add1,
    fp_update: Regular,
    opcode: AssertEq,
}
InstructionRepr {
    off0: 0,
    off1: -4,
    off2: 0,
    imm: None,
    dst_register: AP,
    op0_register: FP,
    op1_addr: Op0,
    res: Op1,
    pc_update: Regular,
    ap_update: Add1,
    fp_update: Regular,
    opcode: AssertEq,
}
InstructionRepr {
    off0: -1,
    off1: -1,
    off2: 1,
    imm: Some(
        8,
    ),
    dst_register: FP,
    op0_register: FP,
    op1_addr: Imm,
    res: Op1,
    pc_update: JumpRel,
    ap_update: Regular,
    fp_update: Regular,
    opcode: Nop,
}
InstructionRepr {
    off0: 0,
    off1: -1,
    off2: -4,
    imm: None,
    dst_register: AP,
    op0_register: FP,
    op1_addr: FP,
    res: Op1,
    pc_update: Regular,
    ap_update: Add1,
    fp_update: Regular,
    opcode: AssertEq,
}
InstructionRepr {
    off0: 0,
    off1: -1,
    off2: -3,
    imm: None,
    dst_register: AP,
    op0_register: FP,
    op1_addr: FP,
    res: Op1,
    pc_update: Regular,
    ap_update: Add1,
    fp_update: Regular,
    opcode: AssertEq,
}
InstructionRepr {
    off0: 0,
    off1: -1,
    off2: 1,
    imm: Some(
        1,
    ),
    dst_register: AP,
    op0_register: FP,
    op1_addr: Imm,
    res: Op1,
    pc_update: Regular,
    ap_update: Add1,
    fp_update: Regular,
    opcode: AssertEq,
}
InstructionRepr {
    off0: 0,
    off1: -1,
    off2: 1,
    imm: Some(
        0,
    ),
    dst_register: AP,
    op0_register: FP,
    op1_addr: Imm,
    res: Op1,
    pc_update: Regular,
    ap_update: Add1,
    fp_update: Regular,
    opcode: AssertEq,
}
InstructionRepr {
    off0: -2,
    off1: -1,
    off2: 1,
    imm: Some(
        66,
    ),
    dst_register: AP,
    op0_register: FP,
    op1_addr: Imm,
    res: Unconstrained,
    pc_update: Jnz,
    ap_update: Regular,
    fp_update: Regular,
    opcode: Nop,
}
InstructionRepr {
    off0: -3,
    off1: 0,
    off2: -4,
    imm: None,
    dst_register: AP,
    op0_register: AP,
    op1_addr: AP,
    res: Add,
    pc_update: Regular,
    ap_update: Add1,
    fp_update: Regular,
    opcode: AssertEq,
}
InstructionRepr {
    off0: -1,
    off1: -1,
    off2: 1,
    imm: Some(
        4,
    ),
    dst_register: AP,
    op0_register: FP,
    op1_addr: Imm,
    res: Unconstrained,
    pc_update: Jnz,
    ap_update: Regular,
    fp_update: Regular,
    opcode: Nop,
}
InstructionRepr {
    off0: -1,
    off1: -1,
    off2: 1,
    imm: Some(
        16,
    ),
    dst_register: FP,
    op0_register: FP,
    op1_addr: Imm,
    res: Op1,
    pc_update: JumpRel,
    ap_update: Regular,
    fp_update: Regular,
    opcode: Nop,
}
InstructionRepr {
    off0: -1,
    off1: -1,
    off2: 1,
    imm: Some(
        1,
    ),
    dst_register: FP,
    op0_register: FP,
    op1_addr: Imm,
    res: Op1,
    pc_update: Regular,
    ap_update: Add,
    fp_update: Regular,
    opcode: Nop,
}
InstructionRepr {
    off0: 0,
    off1: -1,
    off2: 1,
    imm: Some(
        7733229381460288120802334208475838166080759535023995805565484692595,
    ),
    dst_register: AP,
    op0_register: FP,
    op1_addr: Imm,
    res: Op1,
    pc_update: Regular,
    ap_update: Add1,
    fp_update: Regular,
    opcode: AssertEq,
}
InstructionRepr {
    off0: -1,
    off1: -2,
    off2: 0,
    imm: None,
    dst_register: AP,
    op0_register: AP,
    op1_addr: Op0,
    res: Op1,
    pc_update: Regular,
    ap_update: Regular,
    fp_update: Regular,
    opcode: AssertEq,
}
InstructionRepr {
    off0: 0,
    off1: -1,
    off2: -9,
    imm: None,
    dst_register: AP,
    op0_register: FP,
    op1_addr: AP,
    res: Op1,
    pc_update: Regular,
    ap_update: Add1,
    fp_update: Regular,
    opcode: AssertEq,
}
InstructionRepr {
    off0: 0,
    off1: -1,
    off2: -11,
    imm: None,
    dst_register: AP,
    op0_register: FP,
    op1_addr: AP,
    res: Op1,
    pc_update: Regular,
    ap_update: Add1,
    fp_update: Regular,
    opcode: AssertEq,
}
InstructionRepr {
    off0: 0,
    off1: -1,
    off2: -5,
    imm: None,
    dst_register: AP,
    op0_register: FP,
    op1_addr: FP,
    res: Op1,
    pc_update: Regular,
    ap_update: Add1,
    fp_update: Regular,
    opcode: AssertEq,
}
InstructionRepr {
    off0: 0,
    off1: -1,
    off2: 1,
    imm: Some(
        1,
    ),
    dst_register: AP,
    op0_register: FP,
    op1_addr: Imm,
    res: Op1,
    pc_update: Regular,
    ap_update: Add1,
    fp_update: Regular,
    opcode: AssertEq,
}
InstructionRepr {
    off0: 0,
    off1: -1,
    off2: -6,
    imm: None,
    dst_register: AP,
    op0_register: FP,
    op1_addr: AP,
    res: Op1,
    pc_update: Regular,
    ap_update: Add1,
    fp_update: Regular,
    opcode: AssertEq,
}
InstructionRepr {
    off0: 0,
    off1: -7,
    off2: 1,
    imm: Some(
        1,
    ),
    dst_register: AP,
    op0_register: AP,
    op1_addr: Imm,
    res: Add,
    pc_update: Regular,
    ap_update: Add1,
    fp_update: Regular,
    opcode: AssertEq,
}
InstructionRepr {
    off0: -2,
    off1: -1,
    off2: -1,
    imm: None,
    dst_register: FP,
    op0_register: FP,
    op1_addr: FP,
    res: Op1,
    pc_update: Jump,
    ap_update: Regular,
    fp_update: Dst,
    opcode: Ret,
}
InstructionRepr {
    off0: 0,
    off1: 1,
    off2: 1,
    imm: Some(
        74,
    ),
    dst_register: AP,
    op0_register: AP,
    op1_addr: Imm,
    res: Op1,
    pc_update: JumpRel,
    ap_update: Add2,
    fp_update: ApPlus2,
    opcode: Call,
}
InstructionRepr {
    off0: 0,
    off1: -1,
    off2: 1,
    imm: Some(
        73,
    ),
    dst_register: AP,
    op0_register: AP,
    op1_addr: Imm,
    res: Add,
    pc_update: Regular,
    ap_update: Add1,
    fp_update: Regular,
    opcode: AssertEq,
}
InstructionRepr {
    off0: 0,
    off1: -1,
    off2: 0,
    imm: None,
    dst_register: AP,
    op0_register: AP,
    op1_addr: Op0,
    res: Op1,
    pc_update: Regular,
    ap_update: Add1,
    fp_update: Regular,
    opcode: AssertEq,
}
InstructionRepr {
    off0: 0,
    off1: -1,
    off2: 1,
    imm: Some(
        9,
    ),
    dst_register: AP,
    op0_register: FP,
    op1_addr: Imm,
    res: Unconstrained,
    pc_update: Jnz,
    ap_update: Add1,
    fp_update: Regular,
    opcode: Nop,
}
InstructionRepr {
    off0: -13,
    off1: 0,
    off2: 1,
    imm: Some(
        0,
    ),
    dst_register: AP,
    op0_register: AP,
    op1_addr: Imm,
    res: Add,
    pc_update: Regular,
    ap_update: Add1,
    fp_update: Regular,
    opcode: AssertEq,
}
InstructionRepr {
    off0: 0,
    off1: -1,
    off2: 1,
    imm: Some(
        340282366920938463463374607431768211456,
    ),
    dst_register: AP,
    op0_register: AP,
    op1_addr: Imm,
    res: Add,
    pc_update: Regular,
    ap_update: Add1,
    fp_update: Regular,
    opcode: AssertEq,
}
InstructionRepr {
    off0: -1,
    off1: -14,
    off2: 0,
    imm: None,
    dst_register: AP,
    op0_register: AP,
    op1_addr: Op0,
    res: Op1,
    pc_update: Regular,
    ap_update: Regular,
    fp_update: Regular,
    opcode: AssertEq,
}
InstructionRepr {
    off0: -1,
    off1: -1,
    off2: 1,
    imm: Some(
        18,
    ),
    dst_register: FP,
    op0_register: FP,
    op1_addr: Imm,
    res: Op1,
    pc_update: JumpRel,
    ap_update: Regular,
    fp_update: Regular,
    opcode: Nop,
}
InstructionRepr {
    off0: -13,
    off1: 0,
    off2: 1,
    imm: Some(
        0,
    ),
    dst_register: AP,
    op0_register: AP,
    op1_addr: Imm,
    res: Add,
    pc_update: Regular,
    ap_update: Add1,
    fp_update: Regular,
    opcode: AssertEq,
}
InstructionRepr {
    off0: -1,
    off1: -13,
    off2: 0,
    imm: None,
    dst_register: AP,
    op0_register: AP,
    op1_addr: Op0,
    res: Op1,
    pc_update: Regular,
    ap_update: Regular,
    fp_update: Regular,
    opcode: AssertEq,
}
InstructionRepr {
    off0: -1,
    off1: -1,
    off2: 1,
    imm: Some(
        1,
    ),
    dst_register: FP,
    op0_register: FP,
    op1_addr: Imm,
    res: Op1,
    pc_update: Regular,
    ap_update: Add,
    fp_update: Regular,
    opcode: Nop,
}
InstructionRepr {
    off0: -9,
    off1: -1,
    off2: 0,
    imm: None,
    dst_register: AP,
    op0_register: AP,
    op1_addr: Op0,
    res: Op1,
    pc_update: Regular,
    ap_update: Regular,
    fp_update: Regular,
    opcode: AssertEq,
}
InstructionRepr {
    off0: 0,
    off1: -14,
    off2: 1,
    imm: Some(
        1,
    ),
    dst_register: AP,
    op0_register: AP,
    op1_addr: Imm,
    res: Add,
    pc_update: Regular,
    ap_update: Add1,
    fp_update: Regular,
    opcode: AssertEq,
}
InstructionRepr {
    off0: 0,
    off1: -1,
    off2: -3,
    imm: None,
    dst_register: AP,
    op0_register: FP,
    op1_addr: AP,
    res: Op1,
    pc_update: Regular,
    ap_update: Add1,
    fp_update: Regular,
    opcode: AssertEq,
}
InstructionRepr {
    off0: 0,
    off1: -1,
    off2: -5,
    imm: None,
    dst_register: AP,
    op0_register: FP,
    op1_addr: FP,
    res: Op1,
    pc_update: Regular,
    ap_update: Add1,
    fp_update: Regular,
    opcode: AssertEq,
}
InstructionRepr {
    off0: 0,
    off1: -1,
    off2: 1,
    imm: Some(
        0,
    ),
    dst_register: AP,
    op0_register: FP,
    op1_addr: Imm,
    res: Op1,
    pc_update: Regular,
    ap_update: Add1,
    fp_update: Regular,
    opcode: AssertEq,
}
InstructionRepr {
    off0: 0,
    off1: -1,
    off2: -5,
    imm: None,
    dst_register: AP,
    op0_register: FP,
    op1_addr: AP,
    res: Op1,
    pc_update: Regular,
    ap_update: Add1,
    fp_update: Regular,
    opcode: AssertEq,
}
InstructionRepr {
    off0: 0,
    off1: -6,
    off2: 1,
    imm: Some(
        1,
    ),
    dst_register: AP,
    op0_register: AP,
    op1_addr: Imm,
    res: Add,
    pc_update: Regular,
    ap_update: Add1,
    fp_update: Regular,
    opcode: AssertEq,
}
InstructionRepr {
    off0: -2,
    off1: -1,
    off2: -1,
    imm: None,
    dst_register: FP,
    op0_register: FP,
    op1_addr: FP,
    res: Op1,
    pc_update: Jump,
    ap_update: Regular,
    fp_update: Dst,
    opcode: Ret,
}
InstructionRepr {
    off0: -1,
    off1: -1,
    off2: 1,
    imm: Some(
        1,
    ),
    dst_register: FP,
    op0_register: FP,
    op1_addr: Imm,
    res: Op1,
    pc_update: Regular,
    ap_update: Add,
    fp_update: Regular,
    opcode: Nop,
}
InstructionRepr {
    off0: 0,
    off1: -1,
    off2: 1,
    imm: Some(
        375233589013918064796019,
    ),
    dst_register: AP,
    op0_register: FP,
    op1_addr: Imm,
    res: Op1,
    pc_update: Regular,
    ap_update: Add1,
    fp_update: Regular,
    opcode: AssertEq,
}
InstructionRepr {
    off0: -1,
    off1: -2,
    off2: 0,
    imm: None,
    dst_register: AP,
    op0_register: AP,
    op1_addr: Op0,
    res: Op1,
    pc_update: Regular,
    ap_update: Regular,
    fp_update: Regular,
    opcode: AssertEq,
}
InstructionRepr {
    off0: 0,
    off1: -16,
    off2: 1,
    imm: Some(
        1,
    ),
    dst_register: AP,
    op0_register: AP,
    op1_addr: Imm,
    res: Add,
    pc_update: Regular,
    ap_update: Add1,
    fp_update: Regular,
    opcode: AssertEq,
}
InstructionRepr {
    off0: 0,
    off1: -1,
    off2: -18,
    imm: None,
    dst_register: AP,
    op0_register: FP,
    op1_addr: AP,
    res: Op1,
    pc_update: Regular,
    ap_update: Add1,
    fp_update: Regular,
    opcode: AssertEq,
}
InstructionRepr {
    off0: 0,
    off1: -1,
    off2: -5,
    imm: None,
    dst_register: AP,
    op0_register: FP,
    op1_addr: FP,
    res: Op1,
    pc_update: Regular,
    ap_update: Add1,
    fp_update: Regular,
    opcode: AssertEq,
}
InstructionRepr {
    off0: 0,
    off1: -1,
    off2: 1,
    imm: Some(
        1,
    ),
    dst_register: AP,
    op0_register: FP,
    op1_addr: Imm,
    res: Op1,
    pc_update: Regular,
    ap_update: Add1,
    fp_update: Regular,
    opcode: AssertEq,
}
InstructionRepr {
    off0: 0,
    off1: -1,
    off2: -6,
    imm: None,
    dst_register: AP,
    op0_register: FP,
    op1_addr: AP,
    res: Op1,
    pc_update: Regular,
    ap_update: Add1,
    fp_update: Regular,
    opcode: AssertEq,
}
InstructionRepr {
    off0: 0,
    off1: -7,
    off2: 1,
    imm: Some(
        1,
    ),
    dst_register: AP,
    op0_register: AP,
    op1_addr: Imm,
    res: Add,
    pc_update: Regular,
    ap_update: Add1,
    fp_update: Regular,
    opcode: AssertEq,
}
InstructionRepr {
    off0: -2,
    off1: -1,
    off2: -1,
    imm: None,
    dst_register: FP,
    op0_register: FP,
    op1_addr: FP,
    res: Op1,
    pc_update: Jump,
    ap_update: Regular,
    fp_update: Dst,
    opcode: Ret,
}
InstructionRepr {
    off0: -1,
    off1: -1,
    off2: 1,
    imm: Some(
        1,
    ),
    dst_register: FP,
    op0_register: FP,
    op1_addr: Imm,
    res: Op1,
    pc_update: Regular,
    ap_update: Add,
    fp_update: Regular,
    opcode: Nop,
}
InstructionRepr {
    off0: 0,
    off1: -1,
    off2: 1,
    imm: Some(
        485748461484230571791265682659113160264223489397539653310998840191492913,
    ),
    dst_register: AP,
    op0_register: FP,
    op1_addr: Imm,
    res: Op1,
    pc_update: Regular,
    ap_update: Add1,
    fp_update: Regular,
    opcode: AssertEq,
}
InstructionRepr {
    off0: -1,
    off1: -2,
    off2: 0,
    imm: None,
    dst_register: AP,
    op0_register: AP,
    op1_addr: Op0,
    res: Op1,
    pc_update: Regular,
    ap_update: Regular,
    fp_update: Regular,
    opcode: AssertEq,
}
InstructionRepr {
    off0: 0,
    off1: -1,
    off2: -8,
    imm: None,
    dst_register: AP,
    op0_register: FP,
    op1_addr: AP,
    res: Op1,
    pc_update: Regular,
    ap_update: Add1,
    fp_update: Regular,
    opcode: AssertEq,
}
InstructionRepr {
    off0: 0,
    off1: -1,
    off2: -10,
    imm: None,
    dst_register: AP,
    op0_register: FP,
    op1_addr: AP,
    res: Op1,
    pc_update: Regular,
    ap_update: Add1,
    fp_update: Regular,
    opcode: AssertEq,
}
InstructionRepr {
    off0: 0,
    off1: -1,
    off2: -5,
    imm: None,
    dst_register: AP,
    op0_register: FP,
    op1_addr: FP,
    res: Op1,
    pc_update: Regular,
    ap_update: Add1,
    fp_update: Regular,
    opcode: AssertEq,
}
InstructionRepr {
    off0: 0,
    off1: -1,
    off2: 1,
    imm: Some(
        1,
    ),
    dst_register: AP,
    op0_register: FP,
    op1_addr: Imm,
    res: Op1,
    pc_update: Regular,
    ap_update: Add1,
    fp_update: Regular,
    opcode: AssertEq,
}
InstructionRepr {
    off0: 0,
    off1: -1,
    off2: -6,
    imm: None,
    dst_register: AP,
    op0_register: FP,
    op1_addr: AP,
    res: Op1,
    pc_update: Regular,
    ap_update: Add1,
    fp_update: Regular,
    opcode: AssertEq,
}
InstructionRepr {
    off0: 0,
    off1: -7,
    off2: 1,
    imm: Some(
        1,
    ),
    dst_register: AP,
    op0_register: AP,
    op1_addr: Imm,
    res: Add,
    pc_update: Regular,
    ap_update: Add1,
    fp_update: Regular,
    opcode: AssertEq,
}
InstructionRepr {
    off0: -2,
    off1: -1,
    off2: -1,
    imm: None,
    dst_register: FP,
    op0_register: FP,
    op1_addr: FP,
    res: Op1,
    pc_update: Jump,
    ap_update: Regular,
    fp_update: Dst,
    opcode: Ret,
}
InstructionRepr {
    off0: -1,
    off1: -1,
    off2: 1,
    imm: Some(
        1,
    ),
    dst_register: FP,
    op0_register: FP,
    op1_addr: Imm,
    res: Op1,
    pc_update: Regular,
    ap_update: Add,
    fp_update: Regular,
    opcode: Nop,
}
InstructionRepr {
    off0: 0,
    off1: -1,
    off2: 1,
    imm: Some(
        375233589013918064796019,
    ),
    dst_register: AP,
    op0_register: FP,
    op1_addr: Imm,
    res: Op1,
    pc_update: Regular,
    ap_update: Add1,
    fp_update: Regular,
    opcode: AssertEq,
}
InstructionRepr {
    off0: -1,
    off1: -2,
    off2: 0,
    imm: None,
    dst_register: AP,
    op0_register: AP,
    op1_addr: Op0,
    res: Op1,
    pc_update: Regular,
    ap_update: Regular,
    fp_update: Regular,
    opcode: AssertEq,
}
InstructionRepr {
    off0: 0,
    off1: -7,
    off2: 1,
    imm: Some(
        1,
    ),
    dst_register: AP,
    op0_register: FP,
    op1_addr: Imm,
    res: Add,
    pc_update: Regular,
    ap_update: Add1,
    fp_update: Regular,
    opcode: AssertEq,
}
InstructionRepr {
    off0: 0,
    off1: -1,
    off2: -6,
    imm: None,
    dst_register: AP,
    op0_register: FP,
    op1_addr: FP,
    res: Op1,
    pc_update: Regular,
    ap_update: Add1,
    fp_update: Regular,
    opcode: AssertEq,
}
InstructionRepr {
    off0: 0,
    off1: -1,
    off2: -5,
    imm: None,
    dst_register: AP,
    op0_register: FP,
    op1_addr: FP,
    res: Op1,
    pc_update: Regular,
    ap_update: Add1,
    fp_update: Regular,
    opcode: AssertEq,
}
InstructionRepr {
    off0: 0,
    off1: -1,
    off2: 1,
    imm: Some(
        1,
    ),
    dst_register: AP,
    op0_register: FP,
    op1_addr: Imm,
    res: Op1,
    pc_update: Regular,
    ap_update: Add1,
    fp_update: Regular,
    opcode: AssertEq,
}
InstructionRepr {
    off0: 0,
    off1: -1,
    off2: -6,
    imm: None,
    dst_register: AP,
    op0_register: FP,
    op1_addr: AP,
    res: Op1,
    pc_update: Regular,
    ap_update: Add1,
    fp_update: Regular,
    opcode: AssertEq,
}
InstructionRepr {
    off0: 0,
    off1: -7,
    off2: 1,
    imm: Some(
        1,
    ),
    dst_register: AP,
    op0_register: AP,
    op1_addr: Imm,
    res: Add,
    pc_update: Regular,
    ap_update: Add1,
    fp_update: Regular,
    opcode: AssertEq,
}
InstructionRepr {
    off0: -2,
    off1: -1,
    off2: -1,
    imm: None,
    dst_register: FP,
    op0_register: FP,
    op1_addr: FP,
    res: Op1,
    pc_update: Jump,
    ap_update: Regular,
    fp_update: Dst,
    opcode: Ret,
}